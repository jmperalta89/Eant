# -*- coding: utf-8 -*-
"""Copia de Trabajo Final - Analisis y Mapas - 30.07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E9uexXBk8qLb_0fb9Zfwphy2mSDgVOXY

## Instalaciones
"""

! pip install plotly --upgrade

!pip install leafmap

!pip install geopandas

"""## Paquetes"""

import pandas as pd
import numpy as np
from datetime import datetime
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import leafmap

"""## Poblacion 2010 y superficies CCABA

Población para el año 2010
"""

url_poblacion_barrio='https://cdn.buenosaires.gob.ar/datosabiertos/datasets/barrios/caba_pob_barrios_2010.csv'

poblacion_barrio_2010=pd.read_csv(url_poblacion_barrio)
poblacion_barrio_2010

"""Superficies y permitros por barrio y comuna"""

url_superficies='https://cdn.buenosaires.gob.ar/datosabiertos/datasets/barrios/barrios.csv'
superficies_barrio=pd.read_csv(url_superficies)
#superficies_barrio.drop('WKT',axis=1,inplace=True)
superficies_barrio.info()

"""Unimos poblacion 2010 con la superficie y perimetro de cada barrio"""

poblacion_barrio_2010_final=poblacion_barrio_2010.merge(superficies_barrio,
                           how='left',
                           left_on='BARRIO',
                           right_on='barrio')
poblacion_barrio_2010_final.drop('barrio',axis=1,inplace=True)
poblacion_barrio_2010_final.area=poblacion_barrio_2010_final.area.round(2)
poblacion_barrio_2010_final.perimetro=poblacion_barrio_2010_final.perimetro.round(2)
poblacion_barrio_2010_final.columns=[i.lower() for i in poblacion_barrio_2010_final.columns]

poblacion_barrio_2010_final.head()

"""## Espacios verdes CABA

Analisis de los espacios verdes, unimos población 2010 por barrio con la superficie de espacios verdes por barrio
"""

link_espacio_verde='https://cdn.buenosaires.gob.ar/datosabiertos/datasets/secretaria-de-desarrollo-urbano/espacios-verdes/espacio-verde-publico.csv'
data_espacio_verde=pd.read_csv(link_espacio_verde)
data_espacio_verde.head(2)

data_espacio_verde.columns=data_espacio_verde.columns.str.lower()
data_espacio_verde.columns

data_espacio_verde['barrio'].unique()

""" Completamos los barrios vacios"""

data_espacio_verde.loc[data_espacio_verde['barrio'].isnull(),:]['ubicacion']

data_espacio_verde.loc[1418 ,'barrio']='VILLA REAL'
data_espacio_verde.loc[1491 ,'barrio']='VILLA RIACHUELO'
data_espacio_verde.loc[1492 ,'barrio']='VILLA RIACHUELO'
data_espacio_verde.loc[1494 ,'barrio']='VILLA RIACHUELO'
data_espacio_verde.loc[1495 ,'barrio']='VILLA RIACHUELO'
data_espacio_verde.loc[1648 ,'barrio']='PUERTO MADERO'
data_espacio_verde.loc[data_espacio_verde['barrio'].isnull(),:]['ubicacion']

"""Cambiamos los barrios mal escritos"""

data_espacio_verde.loc[data_espacio_verde['barrio']=='BALBANERA','barrio']='BALVANERA'
data_espacio_verde.loc[data_espacio_verde['barrio']=='VÉLEZ SÁRSFIELD','barrio']='VELEZ SARSFIELD'
len(data_espacio_verde['barrio'].unique())

"""Borramos la general paz, no corresponde"""

data_espacio_verde.sort_values('area',ascending=False)[['barrio','area','ubicacion','nombre']][:5]
#BORRAR VILLA REAL OUTLIER GENERAL PAZ

data_espacio_verde.drop(473,inplace=True)
data_espacio_verde.reset_index(drop=True,inplace=True)

#agregamos los datos vacios de area segun la clasificacion del gobierno de buenos aires
data_espacio_verde.loc[(data_espacio_verde['area']==0) & (data_espacio_verde['clasificac']=='PLAZOLETA') ,'area']=78.90
data_espacio_verde.loc[(data_espacio_verde['area']==0) & (data_espacio_verde['clasificac']=='PLAZA') ,'area']=386.30

data_espacio_verde.groupby(['barrio','clasificac'],as_index=False)['area'].sum()

#hacemos el dataframe final para poder unir con los barrios y tener los datos en un solo dataframe

data_espacio_verde_barrio=data_espacio_verde.groupby(['barrio'],as_index=False)['area'].sum().rename({'area':'superficie_verde'},axis=1)
data_espacio_verde_barrio

"""Unimos los dataframes con barrios y superficies verdes"""

DF_FINAL=poblacion_barrio_2010_final.merge(data_espacio_verde_barrio,
                                 how='left',
                                 on='barrio')

DF_FINAL['sup_verde/hab']=round(DF_FINAL['superficie_verde']/DF_FINAL['poblacion'],2)
DF_FINAL['sup_verde/sup']=round(DF_FINAL['superficie_verde']/DF_FINAL['area'],2)

DF_FINAL

#DF_FINAL.to_csv(r'C:\Users\Ariel\Google Drive\EANT\Data Analytics con Python\Trabajo Final\DF_FINAL.csv')

"""## Estaciones de bici CABA"""

url_bicis = 'https://cdn.buenosaires.gob.ar/datosabiertos/datasets/transporte/estaciones-bicicletas-publicas/nuevas-estaciones-bicicletas-publicas.csv'
estaciones = pd.read_csv(url_bicis)
estaciones.head()

estaciones.info()

estaciones_filtrado = estaciones.loc [ : , ['WKT', 'nombre', 'anclajes_t'] ]
estaciones_filtrado.head()

estaciones_filtrado ['longitud'] = ''
estaciones_filtrado ['latitud'] = ''

estaciones_filtrado['longitud'] = [float(i.split(" ")[1:3][0].replace("(","")) for i in estaciones_filtrado["WKT"]]
estaciones_filtrado['latitud'] = [float(i.split(" ")[1:3][1].replace(")","")) for i in estaciones_filtrado["WKT"]]
estaciones_filtrado.head(2)

"""## Campanas y puntos verdes CABA

En la Ciudad de Buenos Aires contamos con dos lugares donde dejar residuos para reciclar. Las campanas verdes, puntos fijos para depositar residuso y los puntos verdes, lugares atendidos por personas con un horario determinado. A continuacion veremos cuantos hay por comuna y como se distribuyen.
"""

url_campanas='https://cdn.buenosaires.gob.ar/datosabiertos/datasets/agencia-de-proteccion-ambiental/puntos-verdes/puntos-verdes.csv'
data_campanas=pd.read_csv(url_campanas)
data_campanas.head(2)

data_filtrado = data_campanas.loc[:,['WKT', 'nombre','barrio','comuna'] ]  
data_filtrado

data_filtrado['longitud']=''
data_filtrado['latitud']=''
data_filtrado['longitud'] = [float(i.split(" ")[1:3][0].replace("(","")) for i in data_filtrado["WKT"]]
data_filtrado['latitud'] = [float(i.split(" ")[1:3][1].replace(")","")) for i in data_filtrado["WKT"]]
data_filtrado.head(2)

"""## Graficos en Plotly"""

DF_FINAL.columns

px.bar(DF_FINAL.sort_values('superficie_verde',ascending=False)[:15],
       x='barrio',
       y='superficie_verde',
       color='barrio',
       title='Top 15 de barrios por superficie verde'
       )

px.bar(DF_FINAL.sort_values('sup_verde/sup',ascending=False)[:15],
       x='barrio',
       y='sup_verde/sup',
       color='barrio',
       title='Top 15 de barrios por superficie verde por m2'
       )

px.bar(DF_FINAL.sort_values('sup_verde/hab',ascending=False)[:15],
       x='barrio',
       y='sup_verde/hab',
       color='barrio',
       title='Top 15 de barrios por superficie verde por habitante'
       )

""">## Mapas para visualizacion


"""

import folium
import geopandas as gpd
import leafmap
import leafmap.foliumap as leafmap
import shapely
import random
from folium.plugins import MarkerCluster

DF_FINAL.head(2)

#definimos geojson del mapa de barrio
geojson='https://cdn.buenosaires.gob.ar/datosabiertos/datasets/barrios/barrios.geojson'
#transformamos los wkt en centroid y luego en longitud y latitud
DF_FINAL=gpd.GeoDataFrame(DF_FINAL, crs='epsg:4326')
DF_FINAL['wkt']=gpd.GeoSeries.from_wkt(DF_FINAL['wkt'])
DF_FINAL['centro_poligono']=DF_FINAL['wkt'].centroid
DF_FINAL['centro_poligono_str']=DF_FINAL['centro_poligono'].astype(str)
DF_FINAL['longitud']=[  float(i.split(' ')[1].replace('(',''))   for i in DF_FINAL['centro_poligono_str']]
DF_FINAL['latitud']=[  float(i.split(' ')[2].replace(')',''))   for i in DF_FINAL['centro_poligono_str']]
DF_FINAL.head(2)

DF_FINAL['superficie_verde_bins']=pd.qcut(DF_FINAL['superficie_verde'],labels=[1,2,3,4],q=4)
DF_FINAL['porcentaje_de_superficie_verde']=DF_FINAL['superficie_verde']/DF_FINAL['superficie_verde'].sum()*100
DF_FINAL.head(2)

m=leafmap.Map(center=[-34.6004,-58.4452],zoom=12)

folium.Choropleth(
    geo_data=geojson,
    name="SUPERFICIE VERDE",
    data=DF_FINAL,
    columns=["barrio", "porcentaje_de_superficie_verde"],
    key_on="feature.properties.barrio",
    fill_color='BrBG',
    fill_opacity=0.7,
    line_opacity=0.8,
    line_color='Black',
    legend_name="Superficie verde en %",
    overlay=True
    ).add_to(m)



feature_group_barrios = folium.FeatureGroup(name='Barrios',overlay=True,show=False)

for i in range(0,DF_FINAL.shape[0]):
                  popup_2= (DF_FINAL.loc[ i , 'barrio'])+'\nSuperficie verde: ' + str(int(DF_FINAL.loc[ i , 'superficie_verde']))
                  folium.features.Marker(  location=[DF_FINAL.loc[ i , 'latitud'],DF_FINAL.loc[ i , 'longitud'] ],
                                popup=popup_2,
                                icon=folium.plugins.BeautifyIcon(icon="star",text_color='Blue',#background_color='transparent',border_color='transparent',
inner_icon_style='font-size:20px'
                                                                 )
                                ).add_to(feature_group_barrios)

feature_group_barrios.add_to(m)



icon_create_function_bicis = ''' function (cluster) {
 var childCount = cluster.getChildCount();
 var c = ' marker-cluster-';
 if (childCount < 3) {
   c += 'small';
 } 
 else if (childCount < 10) {
   c += 'medium';
 } 
 else {
   c += 'large';
 }

 return new L.DivIcon({ html: '<div><span>' + childCount + '</span></div>', 
  className: 'marker-cluster' + c, iconSize: new L.Point(40, 40) });
 }
 
 
 
 '''

marker_cluster_bicis = MarkerCluster(icon_create_function=icon_create_function_bicis,name='Estaciones Bici').add_to(m)

for i in range(estaciones_filtrado.shape[0]):
  lat_ = estaciones_filtrado.loc[i,'latitud']
  long_ = estaciones_filtrado.loc[i,'longitud']
  folium.Marker(  location=[ lat_ , long_ ], icon=folium.Icon(icon= 'star',color='black')).add_to(marker_cluster_bicis)




marker_cluster = MarkerCluster(name='Campanas y Puntos verdes').add_to(m)

for i in range(data_filtrado.shape[0]):
  lat_ = data_filtrado.loc[i,'latitud']
  long_ = data_filtrado.loc[i,'longitud']
  folium.Marker(  location=[ lat_ , long_ ], icon=folium.Icon(icon='glyphicon-trash',color='green')).add_to(marker_cluster)


folium.LayerControl().add_to(m)

#m.to_html(outfile='mapa.html')
m

df_tabla=DF_FINAL[['barrio','superficie_verde']]
df_tabla.head(2)

#borrador de radar chart


import plotly.graph_objects as go

categorias = [ 'bici', 'campana','ruido','espacio verde' ]

fig = go.Figure()

fig.add_trace(go.Scatterpolar(
      r=[1, 5, 2, 2],
      theta=categorias,
      fill='toself',
      name='Boedo'
))
fig.add_trace(go.Scatterpolar(
      r=[4, 3, 2.5, 5],
      theta=categorias,
      fill='toself',
      name='Parque Patricios'
))

fig.update_layout(
  polar=dict(
    radialaxis=dict(
      visible=True,
      range=[0, 5]
    )),
  showlegend=False
)

fig.show()

!pip freeze > requirements.txt
import types

def imports():
  for name, val in globals().items():
    if isinstance(val, types.ModuleType):
      if val.__name__ !='builtins':
        if val.__name__!='types':
          yield val.__name__
list(imports())